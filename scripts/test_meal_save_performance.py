#!/usr/bin/env python3
"""
ÏãùÎã® Ï†ÄÏû• Í∏∞Îä• ÏÑ±Îä• ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏
ÏûêÏó∞Ïñ¥ ÏöîÏ≤≠Î∂ÄÌÑ∞ ÏãùÎã® ÏÉùÏÑ± Î∞è Ï†ÄÏû•ÍπåÏßÄÏùò Ï†ÑÏ≤¥ ÌîåÎ°úÏö∞Î•º ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§.
"""

import asyncio
import time
import statistics
from typing import List, Dict, Any
import sys
import os
from dotenv import load_dotenv
from datetime import date, timedelta

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î•º Python pathÏóê Ï∂îÍ∞Ä
backend_path = os.path.join(os.path.dirname(__file__), '..', 'backend')
sys.path.insert(0, backend_path)

# .env ÌååÏùº Î°úÎìú
env_path = os.path.join(os.path.dirname(__file__), '..', 'backend', '.env')
load_dotenv(env_path)

from app.core.orchestrator import Orchestrator

class MealSavePerformanceTester:
    def __init__(self):
        self.orchestrator = Orchestrator()
        self.test_user_id = "test_user_123"
        self.test_queries = [
            # ÏãùÎã® ÏÉùÏÑ± Î∞è Ï†ÄÏû• ÏöîÏ≤≠
            "7Ïùº ÌÇ§ÌÜ† ÏãùÎã®Ìëú ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "Îã§Ïùå Ï£º ÏãùÎã® Í≥ÑÌöç ÏÑ∏ÏõåÏÑú Ï∫òÎ¶∞ÎçîÏóê Ï∂îÍ∞ÄÌï¥Ï§ò",
            "ÌÇ§ÌÜ† Îã§Ïù¥Ïñ¥Ìä∏ 1Ï£ºÏùº Î©îÎâ¥ ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "Ï†ÄÌÉÑÏàòÌôîÎ¨º ÏãùÎã®Ìëú ÏûëÏÑ±Ìï¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "ÌÇ§ÌÜ† ÏãùÎã® 7Ïùº Í≥ÑÌöç ÏÑ∏ÏõåÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            
            # 3Ïùº ÏãùÎã® Ï†ÄÏû•
            "3Ïùº ÌÇ§ÌÜ† ÏãùÎã® ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "Ï£ºÎßê 3ÏùºÏπò ÏãùÎã®Ìëú ÏûëÏÑ±Ìï¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "ÌÇ§ÌÜ† Îã§Ïù¥Ïñ¥Ìä∏ 3Ïùº Î©îÎâ¥ ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            
            # 1Ïùº ÏãùÎã® Ï†ÄÏû•
            "Ïò§Îäò ÌÇ§ÌÜ† ÏãùÎã® ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "ÎÇ¥Ïùº ÏãùÎã®Ìëú ÏûëÏÑ±Ìï¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "ÌÇ§ÌÜ† Îã§Ïù¥Ïñ¥Ìä∏ ÌïòÎ£® Î©îÎâ¥ ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            
            # ÏûêÏó∞Ïñ¥ Ï†ÄÏû• ÏöîÏ≤≠
            "Ïù¥Î≤à Ï£º ÏãùÎã® ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "ÌÇ§ÌÜ† Îã§Ïù¥Ïñ¥Ìä∏ Î©∞Ïπ†Ïπò Î©îÎâ¥ ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "Ï†ÄÌÉÑÏàòÌôîÎ¨º ÏãùÎã® ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò"
        ]
    
    def _categorize_query(self, query: str) -> str:
        """ÏøºÎ¶¨Î•º Í∏∞Í∞ÑÎ≥ÑÎ°ú Î∂ÑÎ•ò"""
        query_lower = query.lower()
        
        if any(keyword in query_lower for keyword in ["1Ïùº", "ÌïòÎ£®", "Ïò§Îäò", "ÎÇ¥Ïùº"]):
            return "1Ïùº"
        elif any(keyword in query_lower for keyword in ["3Ïùº", "Ï£ºÎßê"]):
            return "3Ïùº"
        elif any(keyword in query_lower for keyword in ["7Ïùº", "1Ï£ºÏùº", "Îã§Ïùå Ï£º", "Ïù¥Î≤à Ï£º"]):
            return "7Ïùº"
        else:
            return "ÏûêÏó∞Ïñ¥"
    
    async def test_single_query(self, query: str) -> Dict[str, Any]:
        """Îã®Ïùº ÏûêÏó∞Ïñ¥ ÏøºÎ¶¨ ÌÖåÏä§Ìä∏ (ÏùòÎèÑ Î∂ÑÎ•ò ‚Üí ÏãùÎã® ÏÉùÏÑ± ‚Üí Ï†ÄÏû•)"""
        print(f"üîç ÌÖåÏä§Ìä∏ ÏøºÎ¶¨: '{query}'")
        
        start_time = time.time()
        
        try:
            # OrchestratorÎ•º ÌÜµÌïú Ï†ÑÏ≤¥ ÌîåÎ°úÏö∞ Ï≤òÎ¶¨
            result = await self.orchestrator.process_message(
                message=query,
                user_id=self.test_user_id,
                location={"lat": 37.4979, "lng": 127.0276},  # Í∞ïÎÇ®Ïó≠
                radius_km=5.0
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            # Í≤∞Í≥º Î∂ÑÏÑù
            success = result.get("response", "") != ""
            has_meal_plan = "ÏãùÎã®" in result.get("response", "") or "Î©îÎâ¥" in result.get("response", "")
            has_save_intent = "Ï†ÄÏû•" in query or "Ï∂îÍ∞Ä" in query or "Í≥ÑÌöç" in query
            has_weekly_structure = "ÏõîÏöîÏùº" in result.get("response", "") or "1ÏùºÏ∞®" in result.get("response", "")
            
            # Í∏∞Í∞ÑÎ≥Ñ Î∂ÑÎ•ò
            query_category = self._categorize_query(query)
            
            # ÏùòÎèÑ Î∂ÑÎ•ò ÌôïÏù∏
            intent = result.get("intent", "unknown")
            
            print(f"  ‚úÖ ÏÑ±Í≥µ: {success}, ÏãúÍ∞Ñ: {duration:.2f}Ï¥à, ÏùòÎèÑ: {intent}, Ïπ¥ÌÖåÍ≥†Î¶¨: {query_category}")
            if success and result.get("response"):
                # ÏùëÎãµ ÎÇ¥Ïö© ÎØ∏Î¶¨Î≥¥Í∏∞ (Ï≤òÏùå 100Í∏ÄÏûê)
                response_preview = result["response"][:100] + "..." if len(result["response"]) > 100 else result["response"]
                print(f"  üìù ÏùëÎãµ ÎØ∏Î¶¨Î≥¥Í∏∞: {response_preview}")
            
            return {
                "query": query,
                "query_category": query_category,
                "success": success,
                "duration": duration,
                "intent": intent,
                "has_meal_plan": has_meal_plan,
                "has_save_intent": has_save_intent,
                "has_weekly_structure": has_weekly_structure,
                "response_length": len(result.get("response", "")),
                "error": None
            }
            
        except Exception as e:
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"  ‚ùå Ïã§Ìå®: {str(e)}, ÏãúÍ∞Ñ: {duration:.2f}Ï¥à")
            
            return {
                "query": query,
                "query_category": self._categorize_query(query),
                "success": False,
                "duration": duration,
                "intent": "error",
                "has_meal_plan": False,
                "has_save_intent": False,
                "has_weekly_structure": False,
                "response_length": 0,
                "error": str(e)
            }
    
    async def test_conversation_flow(self, queries: List[str]) -> Dict[str, Any]:
        """ÎåÄÌôî ÌùêÎ¶Ñ ÌÖåÏä§Ìä∏ (Ïó¨Îü¨ ÏöîÏ≤≠ÏùÑ ÏàúÏ∞®Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨)"""
        print(f"üîç ÎåÄÌôî ÌùêÎ¶Ñ ÌÖåÏä§Ìä∏: {len(queries)}Í∞ú ÏöîÏ≤≠")
        
        start_time = time.time()
        conversation_results = []
        
        try:
            for i, query in enumerate(queries):
                print(f"  ÏöîÏ≤≠ {i+1}/{len(queries)}: {query}")
                
                result = await self.test_single_query(query)
                conversation_results.append(result)
                
                # ÏöîÏ≤≠ Í∞Ñ Í∞ÑÍ≤©
                await asyncio.sleep(1)
            
            end_time = time.time()
            total_duration = end_time - start_time
            
            successful_responses = [r for r in conversation_results if r["success"]]
            avg_response_time = statistics.mean([r["duration"] for r in successful_responses]) if successful_responses else 0
            
            print(f"  ‚úÖ ÎåÄÌôî ÏôÑÎ£å: {len(successful_responses)}/{len(queries)} ÏÑ±Í≥µ, Ï¥ù ÏãúÍ∞Ñ: {total_duration:.2f}Ï¥à")
            
            return {
                "total_queries": len(queries),
                "successful_responses": len(successful_responses),
                "total_duration": total_duration,
                "avg_response_time": avg_response_time,
                "conversation_results": conversation_results
            }
            
        except Exception as e:
            end_time = time.time()
            total_duration = end_time - start_time
            
            print(f"  ‚ùå ÎåÄÌôî Ïã§Ìå®: {str(e)}, ÏãúÍ∞Ñ: {total_duration:.2f}Ï¥à")
            
            return {
                "total_queries": len(queries),
                "successful_responses": 0,
                "total_duration": total_duration,
                "avg_response_time": 0,
                "error": str(e)
            }
    
    async def run_performance_test(self, iterations: int = 3) -> Dict[str, Any]:
        """ÏÑ±Îä• ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        print(f"üöÄ ÏãùÎã® Ï†ÄÏû• ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÏãúÏûë (Í∞Å ÏøºÎ¶¨Îãπ {iterations}Ìöå Î∞òÎ≥µ)")
        print("=" * 80)
        
        all_results = []
        
        # 1. Îã®Ïùº ÏöîÏ≤≠ ÌÖåÏä§Ìä∏
        print(f"\nüìä 1. Îã®Ïùº ÏöîÏ≤≠ ÌÖåÏä§Ìä∏")
        print("-" * 40)
        for i in range(iterations):
            print(f"\nÎ∞òÎ≥µ {i+1}/{iterations}")
            for query in self.test_queries:
                result = await self.test_single_query(query)
                all_results.append(result)
                await asyncio.sleep(2)
        
        # 2. ÎåÄÌôî ÌùêÎ¶Ñ ÌÖåÏä§Ìä∏
        print(f"\nüìä 2. ÎåÄÌôî ÌùêÎ¶Ñ ÌÖåÏä§Ìä∏")
        print("-" * 40)
        conversation_queries = [
            "7Ïùº ÌÇ§ÌÜ† ÏãùÎã®Ìëú ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "3Ïùº ÌÇ§ÌÜ† ÏãùÎã®ÎèÑ ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò",
            "Ïò§Îäò ÏãùÎã®ÎèÑ ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï¥Ï§ò"
        ]
        
        for i in range(iterations):
            print(f"\nÎåÄÌôî ÌùêÎ¶Ñ Î∞òÎ≥µ {i+1}/{iterations}")
            conversation_result = await self.test_conversation_flow(conversation_queries)
            all_results.append({
                "test_type": "conversation",
                "iteration": i + 1,
                **conversation_result
            })
            await asyncio.sleep(3)
        
        # Í≤∞Í≥º Î∂ÑÏÑù
        single_query_results = [r for r in all_results if "test_type" not in r]
        conversation_results = [r for r in all_results if r.get("test_type") == "conversation"]
        
        successful_single = [r for r in single_query_results if r["success"]]
        successful_conversations = [r for r in conversation_results if r["successful_responses"] > 0]
        
        # Í∏∞Í∞ÑÎ≥Ñ Î∂ÑÏÑù
        category_stats = {}
        for category in ["1Ïùº", "3Ïùº", "7Ïùº", "ÏûêÏó∞Ïñ¥"]:
            category_results = [r for r in single_query_results if r.get("query_category") == category]
            category_successful = [r for r in category_results if r["success"]]
            
            if category_results:
                category_stats[category] = {
                    "total": len(category_results),
                    "successful": len(category_successful),
                    "success_rate": len(category_successful) / len(category_results) * 100,
                    "avg_duration": statistics.mean([r["duration"] for r in category_successful]) if category_successful else 0,
                    "meal_plan_rate": len([r for r in category_successful if r["has_meal_plan"]]) / len(category_successful) * 100 if category_successful else 0
                }
        
        # ÏùòÎèÑÎ≥Ñ Î∂ÑÏÑù
        intent_stats = {}
        for result in single_query_results:
            intent = result.get("intent", "unknown")
            if intent not in intent_stats:
                intent_stats[intent] = {"total": 0, "successful": 0, "durations": []}
            intent_stats[intent]["total"] += 1
            if result["success"]:
                intent_stats[intent]["successful"] += 1
                intent_stats[intent]["durations"].append(result["duration"])
        
        for intent in intent_stats:
            stats = intent_stats[intent]
            stats["success_rate"] = stats["successful"] / stats["total"] * 100 if stats["total"] > 0 else 0
            stats["avg_duration"] = statistics.mean(stats["durations"]) if stats["durations"] else 0
        
        if successful_single:
            durations = [r["duration"] for r in successful_single]
            response_lengths = [r["response_length"] for r in successful_single]
            
            single_stats = {
                "total_queries": len(single_query_results),
                "successful_queries": len(successful_single),
                "success_rate": len(successful_single) / len(single_query_results) * 100,
                "avg_duration": statistics.mean(durations),
                "min_duration": min(durations),
                "max_duration": max(durations),
                "median_duration": statistics.median(durations),
                "std_duration": statistics.stdev(durations) if len(durations) > 1 else 0,
                "avg_response_length": statistics.mean(response_lengths)
            }
        else:
            single_stats = {"error": "Îã®Ïùº ÏöîÏ≤≠ ÌÖåÏä§Ìä∏ Ïã§Ìå®"}
        
        if successful_conversations:
            conversation_durations = [r["total_duration"] for r in successful_conversations]
            avg_response_times = [r["avg_response_time"] for r in successful_conversations]
            
            conversation_stats = {
                "total_conversations": len(conversation_results),
                "successful_conversations": len(successful_conversations),
                "success_rate": len(successful_conversations) / len(conversation_results) * 100,
                "avg_total_duration": statistics.mean(conversation_durations),
                "avg_response_time": statistics.mean(avg_response_times)
            }
        else:
            conversation_stats = {"error": "ÎåÄÌôî ÌùêÎ¶Ñ ÌÖåÏä§Ìä∏ Ïã§Ìå®"}
        
        stats = {
            "total_tests": len(all_results),
            "single_query_tests": len(single_query_results),
            "conversation_tests": len(conversation_results),
            "single_query_stats": single_stats,
            "conversation_stats": conversation_stats,
            "category_stats": category_stats,
            "intent_stats": intent_stats
        }
        
        return stats
    
    def print_summary(self, stats: Dict[str, Any]):
        """Í≤∞Í≥º ÏöîÏïΩ Ï∂úÎ†•"""
        print("\n" + "=" * 80)
        print("üìà ÏãùÎã® Ï†ÄÏû• ÏÑ±Îä• ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ")
        print("=" * 80)
        
        print(f"Ï¥ù ÌÖåÏä§Ìä∏ Ïàò: {stats['total_tests']}")
        print(f"Îã®Ïùº ÏöîÏ≤≠ ÌÖåÏä§Ìä∏: {stats['single_query_tests']}")
        print(f"ÎåÄÌôî ÌùêÎ¶Ñ ÌÖåÏä§Ìä∏: {stats['conversation_tests']}")
        
        # Îã®Ïùº ÏöîÏ≤≠ ÌÜµÍ≥Ñ
        if "error" not in stats["single_query_stats"]:
            print(f"\n‚è±Ô∏è Îã®Ïùº ÏöîÏ≤≠ ÏãúÍ∞Ñ ÌÜµÍ≥Ñ:")
            print(f"  Ï¥ù ÏöîÏ≤≠ Ïàò: {stats['single_query_stats']['total_queries']}")
            print(f"  ÏÑ±Í≥µÌïú ÏöîÏ≤≠: {stats['single_query_stats']['successful_queries']}")
            print(f"  ÏÑ±Í≥µÎ•†: {stats['single_query_stats']['success_rate']:.1f}%")
            print(f"  ÌèâÍ∑† ÏùëÎãµ ÏãúÍ∞Ñ: {stats['single_query_stats']['avg_duration']:.2f}Ï¥à")
            print(f"  ÏµúÎã® ÏùëÎãµ ÏãúÍ∞Ñ: {stats['single_query_stats']['min_duration']:.2f}Ï¥à")
            print(f"  ÏµúÏû• ÏùëÎãµ ÏãúÍ∞Ñ: {stats['single_query_stats']['max_duration']:.2f}Ï¥à")
            print(f"  Ï§ëÍ∞ÑÍ∞í: {stats['single_query_stats']['median_duration']:.2f}Ï¥à")
            print(f"  ÌëúÏ§ÄÌé∏Ï∞®: {stats['single_query_stats']['std_duration']:.2f}Ï¥à")
            print(f"  ÌèâÍ∑† ÏùëÎãµ Í∏∏Ïù¥: {stats['single_query_stats']['avg_response_length']:.0f}Í∏ÄÏûê")
        else:
            print(f"\n‚ùå Îã®Ïùº ÏöîÏ≤≠ ÌÖåÏä§Ìä∏: {stats['single_query_stats']['error']}")
        
        # ÎåÄÌôî ÌùêÎ¶Ñ ÌÜµÍ≥Ñ
        if "error" not in stats["conversation_stats"]:
            print(f"\nüí¨ ÎåÄÌôî ÌùêÎ¶Ñ ÌÜµÍ≥Ñ:")
            print(f"  Ï¥ù ÎåÄÌôî Ïàò: {stats['conversation_stats']['total_conversations']}")
            print(f"  ÏÑ±Í≥µÌïú ÎåÄÌôî: {stats['conversation_stats']['successful_conversations']}")
            print(f"  ÏÑ±Í≥µÎ•†: {stats['conversation_stats']['success_rate']:.1f}%")
            print(f"  ÌèâÍ∑† ÎåÄÌôî ÏãúÍ∞Ñ: {stats['conversation_stats']['avg_total_duration']:.2f}Ï¥à")
            print(f"  ÌèâÍ∑† ÏùëÎãµ ÏãúÍ∞Ñ: {stats['conversation_stats']['avg_response_time']:.2f}Ï¥à")
        else:
            print(f"\n‚ùå ÎåÄÌôî ÌùêÎ¶Ñ ÌÖåÏä§Ìä∏: {stats['conversation_stats']['error']}")
        
        # Í∏∞Í∞ÑÎ≥Ñ ÌÜµÍ≥Ñ
        if 'category_stats' in stats and stats['category_stats']:
            print(f"\nüìÖ Í∏∞Í∞ÑÎ≥Ñ ÏÑ±Îä• Î∂ÑÏÑù:")
            for category, cat_stats in stats['category_stats'].items():
                print(f"  {category} ÏöîÏ≤≠:")
                print(f"    Ï¥ù ÏöîÏ≤≠: {cat_stats['total']}Í∞ú")
                print(f"    ÏÑ±Í≥µ: {cat_stats['successful']}Í∞ú")
                print(f"    ÏÑ±Í≥µÎ•†: {cat_stats['success_rate']:.1f}%")
                print(f"    ÌèâÍ∑† ÏãúÍ∞Ñ: {cat_stats['avg_duration']:.2f}Ï¥à")
                print(f"    ÏãùÎã® Ìè¨Ìï®Î•†: {cat_stats['meal_plan_rate']:.1f}%")
                print()
        
        # ÏùòÎèÑÎ≥Ñ ÌÜµÍ≥Ñ
        if 'intent_stats' in stats and stats['intent_stats']:
            print(f"\nüéØ ÏùòÎèÑÎ≥Ñ ÏÑ±Îä• Î∂ÑÏÑù:")
            for intent, intent_stats in stats['intent_stats'].items():
                print(f"  {intent} ÏùòÎèÑ:")
                print(f"    Ï¥ù ÏöîÏ≤≠: {intent_stats['total']}Í∞ú")
                print(f"    ÏÑ±Í≥µ: {intent_stats['successful']}Í∞ú")
                print(f"    ÏÑ±Í≥µÎ•†: {intent_stats['success_rate']:.1f}%")
                print(f"    ÌèâÍ∑† ÏãúÍ∞Ñ: {intent_stats['avg_duration']:.2f}Ï¥à")
                print()

async def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    tester = MealSavePerformanceTester()
    
    try:
        stats = await tester.run_performance_test(iterations=2)  # Í∞Å ÏøºÎ¶¨Îãπ 2Ìöå Î∞òÎ≥µ
        tester.print_summary(stats)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ÌÖåÏä§Ìä∏Í∞Ä Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§.")
    except Exception as e:
        print(f"\n‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò: {e}")

if __name__ == "__main__":
    asyncio.run(main())