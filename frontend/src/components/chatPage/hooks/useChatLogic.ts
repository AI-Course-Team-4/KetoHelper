import { useState, useRef, useEffect, useMemo } from 'react'
import { useLocation } from 'react-router-dom'
import { useChatStore } from '@/store/chatStore'
import { useProfileStore } from '@/store/profileStore'
import { useAuthStore } from '@/store/authStore'
import { useSendMessage, useGetChatThreads, useGetChatHistory, useCreateNewThread, useDeleteThread, ChatHistory, ChatThread, useCreatePlan, useParseDateFromMessage } from '@/hooks/useApi'
import { useQueryClient } from '@tanstack/react-query'

export function useChatLogic() {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [message, setMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [currentThreadId, setCurrentThreadId] = useState<string | null>(null)
  const [shouldAutoScroll, setShouldAutoScroll] = useState(true)
  const [isSavingMeal, setIsSavingMeal] = useState<string | null>(null)
  const [isSaving, setIsSaving] = useState(false)
  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | null>(null)
  const [selectedPlaceIndexByMsg, setSelectedPlaceIndexByMsg] = useState<Record<string, number | null>>({})
  const [isLoadingThread, setIsLoadingThread] = useState(false)
  const [isThread, setIsThread] = useState(false)

  // Refs
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  // ÎùºÏö∞ÌÑ∞
  const location = useLocation()
  
  // Ïä§ÌÜ†Ïñ¥
  const { messages, addMessage, clearMessages } = useChatStore()
  const { profile, loadProfile } = useProfileStore()
  const { user, ensureGuestId, isGuest } = useAuthStore()

  // API ÌõÖÎì§
  const sendMessage = useSendMessage()
  const createNewThread = useCreateNewThread()
  const deleteThread = useDeleteThread()
  const createPlan = useCreatePlan()
  const parseDateFromMessage = useParseDateFromMessage()
  const queryClient = useQueryClient()

  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ (isGuest ÏÉÅÌÉúÎèÑ Í≥†Î†§)
  const isLoggedIn = useMemo(() => !!user?.id && !isGuest, [user?.id, isGuest])

  // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê ID Î≥¥Ïû• Î∞è SessionStorageÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
  useEffect(() => {
    if (!isLoggedIn) {
      const guestId = ensureGuestId()
      console.log('üé≠ Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê ID Î≥¥Ïû•:', guestId)
      console.log('üîç useChatLogic Í≤åÏä§Ìä∏ ÏÉÅÌÉú:', { isLoggedIn, isGuest, hasUser: !!user })
      
      // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎäî messages Î∞∞Ïó¥ÎßåÏúºÎ°ú ÌåêÎã® (SessionStorage Î≥µÏõê ÏùòÏ°¥ÌïòÏßÄ ÏïäÏùå)
      console.log('üé≠ Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê - messages Î∞∞Ïó¥Î°ú ÏÉÅÌÉú ÌåêÎã®:', { messageCount: messages.length })
    }
  }, [isLoggedIn, ensureGuestId, isGuest, user, addMessage])

  // Ï±ÑÌåÖ Ïä§Î†àÎìú Í¥ÄÎ†® ÌõÖ (Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©ÏûêÎßå)
  const { data: chatThreads = [], refetch: refetchThreads } = useGetChatThreads(
    isLoggedIn ? user?.id : undefined, 
    isLoggedIn ? undefined : undefined
  ) as { data: ChatThread[], refetch: () => void }

  const { data: chatHistory = [], refetch: refetchHistory, isLoading: isLoadingHistory } = useGetChatHistory(
    isLoggedIn ? (currentThreadId || '') : '',
    20
  ) as { data: ChatHistory[], refetch: () => void, isLoading: boolean, error: any }
  
  console.log('üîç useGetChatHistory ÏÉÅÌÉú:', {
    currentThreadId,
    chatHistoryLength: chatHistory.length,
    chatHistory: chatHistory.map(msg => ({ id: msg.id, message: msg.message })),
    isLoadingHistory
  })
  
  // ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    if (user?.id) {
      loadProfile(user.id)
    }
  }, [user?.id, loadProfile])
  // Ïä§Î†àÎìú ÏÉÅÌÉú Í∞êÏßÄ Î∞è Í¥ÄÎ¶¨ (Î°úÍ∑∏Ïù∏/Í≤åÏä§Ìä∏ Î∂ÑÍ∏∞)
  useEffect(() => {
    let hasThread = false
    
    if (isLoggedIn) {
      // Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê: currentThreadId Ï°¥Ïû¨ Ïó¨Î∂ÄÎ°ú ÌåêÎã®
      hasThread = !!currentThreadId
    } else {
      // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê: Î°úÏª¨ messages Ï°¥Ïû¨ Ïó¨Î∂ÄÎ°ú ÌåêÎã®
      hasThread = messages.length > 0
    }
    
    console.log('üîç Ïä§Î†àÎìú ÏÉÅÌÉú Î≥ÄÍ≤Ω:', { 
      isLoggedIn,
      currentThreadId, 
      messagesLength: messages.length,
      messages: messages.map(m => ({ id: m.id, role: m.role, content: m.content.substring(0, 20) + '...' })),
      hasThread,
      'Ïù¥Ï†Ñ isThread': isThread
    })
    setIsThread(hasThread)
  }, [isLoggedIn, currentThreadId, messages.length, isThread])

  // hasStartedChatting Ï†úÍ±∞ - Ï±ÑÌåÖ Í∏∞Î°ùÏù¥ ÏûàÏúºÎ©¥ DBÏóêÏÑú Ï°∞ÌöåÎêòÎØÄÎ°ú Î∂àÌïÑÏöî

  // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê Î∏åÎùºÏö∞Ï†Ä ÌÉ≠ Îã´ÏùÑ ÎïåÎßå Ï±ÑÌåÖ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
  useEffect(() => {
    if (!isLoggedIn) {
      const handleBeforeUnload = () => {
        console.log('üö™ Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê Î∏åÎùºÏö∞Ï†Ä ÌÉ≠ Îã´Í∏∞ - Ï±ÑÌåÖ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú')
        clearMessages()
        // SessionStorageÎèÑ ÏÇ≠Ï†ú
        if (typeof window !== 'undefined') {
          sessionStorage.removeItem('keto-coach-chat-guest')
        }
      }

      window.addEventListener('beforeunload', handleBeforeUnload)
      
      return () => {
        window.removeEventListener('beforeunload', handleBeforeUnload)
      }
    }
  }, [isLoggedIn, clearMessages])

  // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ (SessionStorage Î¨¥Í¥Ä)
  useEffect(() => {
    if (!isLoggedIn) {
      console.log('üé≠ Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ ÏÉÅÌÉú (messages Í∏∞Î∞ò):', { 
        messagesCount: messages.length, 
        isLoggedIn, 
        currentThreadId,
        location: location.pathname,
        isLoadingHistory,
        chatHistoryLength: chatHistory.length,
        messages: messages.map(m => ({ id: m.id, role: m.role, content: m.content.substring(0, 30) + '...' }))
      })
    }
  }, [messages.length, isLoggedIn, currentThreadId, location.pathname, isLoadingHistory, chatHistory.length])

  // Í∏∞Ï°¥ LocalStorageÏóê ÏûòÎ™ª Ï†ÄÏû•Îêú Í≤åÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
  useEffect(() => {
    if (!isLoggedIn && typeof window !== 'undefined') {
      // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÏù∏Îç∞ LocalStorageÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Ï†ïÎ¶¨
      const localData = localStorage.getItem('keto-coach-chat')
      if (localData) {
        console.log('üóëÔ∏è Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê LocalStorage Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨')
        localStorage.removeItem('keto-coach-chat')
      }
    }
  }, [isLoggedIn])

  // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎäî Îã§Î•∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï¥ÎèÑ Ï±ÑÌåÖ Ïú†ÏßÄ (Î∏åÎùºÏö∞Ï†Ä Îã´ÏùÑ ÎïåÎßå ÏÇ≠Ï†ú)

  // ÏúÑÏπò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setUserLocation({ lat: position.coords.latitude, lng: position.coords.longitude })
        },
        () => {
          setUserLocation({ lat: 37.4979, lng: 127.0276 }) // Í∞ïÎÇ®Ïó≠ Í∏∞Î≥∏Í∞í
        }
      )
    } else {
      setUserLocation({ lat: 37.4979, lng: 127.0276 })
    }
  }, [])

  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Î≥ÄÌôî Í∞êÏßÄ
  useEffect(() => {
    if (user && !isGuest) {
      console.log('üîê Î°úÍ∑∏Ïù∏ Í∞êÏßÄ - Ï±ÑÌåÖ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî')
      clearMessages()
      setCurrentThreadId(null)
      refetchThreads()
      setSelectedPlaceIndexByMsg({})
      
      // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê SessionStorage Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
      if (typeof window !== 'undefined') {
        sessionStorage.removeItem('keto-coach-chat-guest')
        console.log('üóëÔ∏è Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê SessionStorage Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏôÑÎ£å')
      }
      
      console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÌõÑ Ï±ÑÌåÖ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å')
    }
  }, [user, isGuest, clearMessages, refetchThreads])

  // Ïä§Î†àÎìú Î™©Î°ùÏù¥ Î°úÎìúÎêòÎ©¥ Ï≤´ Î≤àÏß∏ Ïä§Î†àÎìú ÏûêÎèô ÏÑ†ÌÉù (Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©ÏûêÎßå)
  // Ïä§Î†àÎìú ÏÇ≠Ï†ú ÌõÑ Îã§Î•∏ Ïä§Î†àÎìúÍ∞Ä ÏûàÏúºÎ©¥ ÏûêÎèô ÏÑ†ÌÉù
  useEffect(() => {
    if (isLoggedIn && chatThreads.length > 0 && !currentThreadId) {
      console.log('üîÑ Ïä§Î†àÎìú ÏûêÎèô ÏÑ†ÌÉù:', chatThreads[0])
      setCurrentThreadId(chatThreads[0].id)
    }
  }, [isLoggedIn, chatThreads, currentThreadId])

  // Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Î°úÎî© Î°úÏßÅ
  useEffect(() => {
    // Î°úÍ∑∏Ïù∏ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Î¨¥Ïãú
    if (!isLoggedIn) {
      setIsLoadingThread(false)
      return
    }
    
    // Ïä§Î†àÎìúÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏùÑ Îïå Î°úÎî© ÏãúÏûë
    if (currentThreadId) {
      setIsLoadingThread(true)
    }
    
    // Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÎäî DB Î©îÏãúÏßÄÎßå ÏÇ¨Ïö©ÌïòÎØÄÎ°ú Î°úÏª¨ ÎèôÍ∏∞Ìôî Î∂àÌïÑÏöî
    
    // Î°úÎî© ÏôÑÎ£å
    setIsLoadingThread(false)
  }, [currentThreadId, chatHistory, isLoggedIn])

  // Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò Í≤ΩÏö∞ Î©îÏãúÏßÄ ÎèôÍ∏∞ÌôîÎäî Ï≤´ Î≤àÏß∏ useEffectÏóêÏÑú Ï≤òÎ¶¨

  // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÏùò Í≤ΩÏö∞ Ïä§Î†àÎìú Î≥ÄÍ≤Ω Ïãú Î°úÎî© ÏÉÅÌÉú Í¥ÄÎ¶¨
  useEffect(() => {
    if (!isLoggedIn && currentThreadId) {
      // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÏùò Í≤ΩÏö∞ Î°úÎî© ÏãúÏûë
      setIsLoadingThread(true)
      
      // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ Î°úÎî© ÏôÑÎ£å
      const timer = setTimeout(() => {
        setIsLoadingThread(false)
      }, 300)

      return () => clearTimeout(timer)
    }
  }, [currentThreadId, isLoggedIn])

  // Î°úÍ∑∏ÏïÑÏõÉ Ïãú Ï±ÑÌåÖ Ï¥àÍ∏∞Ìôî (Í≤åÏä§Ìä∏ ÏÇ¨Ïö©ÏûêÎäî Ï†úÏô∏)
  useEffect(() => {
    if (!isLoggedIn && !isGuest) {
      // Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏ÏïÑÏõÉÌïú Í≤ΩÏö∞Îßå Ï¥àÍ∏∞Ìôî
      clearMessages()
      setCurrentThreadId(null)
    }
  }, [isLoggedIn, isGuest, clearMessages, setCurrentThreadId])

  // Î©îÏãúÏßÄ Î≥ÄÍ≤Ω Ïãú ÏûêÎèô Ïä§ÌÅ¨Î°§
  useEffect(() => {
    if (shouldAutoScroll) {
      const container = scrollAreaRef.current
      if (container) {
        requestAnimationFrame(() => {
          container.scrollTo({ top: container.scrollHeight, behavior: 'smooth' })
        })
      }
    }
  }, [messages.length, shouldAutoScroll])

  // Ï¥àÍ∏∞ Ïä§ÌÅ¨Î°§ ÏÑ§Ï†ï
  useEffect(() => {
    const container = scrollAreaRef.current
    if (container) {
      requestAnimationFrame(() => {
        container.scrollTo({ top: container.scrollHeight, behavior: 'smooth' })
      })
    }
    setShouldAutoScroll(true)
  }, [])

  return {
    // ÏÉÅÌÉú
    message,
    setMessage,
    isLoading,
    setIsLoading,
    currentThreadId,
    setCurrentThreadId,
    shouldAutoScroll,
    setShouldAutoScroll,
    isSavingMeal,
    setIsSavingMeal,
    isSaving,
    setIsSaving,
    userLocation,
    selectedPlaceIndexByMsg,
    setSelectedPlaceIndexByMsg,
    isLoadingThread,
    setIsLoadingThread,
    
    // Refs
    messagesEndRef,
    scrollAreaRef,
    
    // Ïä§ÌÜ†Ïñ¥
    messages,
    addMessage,
    clearMessages,
    profile,
    user,
    ensureGuestId,
    isGuest,
    
    // API ÌõÖÎì§
    sendMessage,
    createNewThread,
    deleteThread,
    createPlan,
    parseDateFromMessage,
    queryClient,
    
    // Îç∞Ïù¥ÌÑ∞
    chatThreads,
    refetchThreads,
    chatHistory,
    refetchHistory,
    
    // Í≥ÑÏÇ∞Îêú Í∞í
    isLoggedIn,
    isLoadingHistory,
    isThread
  }
}
