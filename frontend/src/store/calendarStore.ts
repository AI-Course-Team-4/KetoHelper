import { create } from 'zustand'

export interface OptimisticMealData {
  id: string
  date: string
  slot: 'breakfast' | 'lunch' | 'dinner' | 'snack'
  title: string
  type: 'optimistic'
  timestamp: number
}

interface CalendarSaveState {
  // Ï†ÄÏû• ÏôÑÎ£å ÏÉÅÌÉú
  lastSaveTimestamp: number | null
  lastSaveData: {
    durationDays: number
    validMealCount: number
    startDate: string
  } | null
  
  // Ï†ÑÏó≠ Ï∫òÎ¶∞Îçî Î°úÎî© ÏÉÅÌÉú
  isCalendarLoading: boolean
  
  // Optimistic Update ÏÉÅÌÉú
  isSaving: boolean
  optimisticMeals: OptimisticMealData[]
  
  // Ï†ÑÏó≠ Ï∫òÎ¶∞Îçî Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï
  setCalendarLoading: (loading: boolean) => void
  
  // Ï†ÄÏû• ÏôÑÎ£å ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï
  setSaveCompleted: (data: {
    durationDays: number
    validMealCount: number
    startDate: string
  }) => void
  
  // Optimistic Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
  addOptimisticMeals: (meals: Omit<OptimisticMealData, 'id' | 'timestamp'>[]) => void
  
  // Optimistic Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞
  removeOptimisticMeals: (mealIds: string[]) => void
  
  // Ï†ÄÏû• ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
  clearSaveState: () => void
  
  // ÏµúÍ∑º Ï†ÄÏû• Ïó¨Î∂Ä ÌôïÏù∏ (5Î∂Ñ Ïù¥ÎÇ¥)
  isRecentSave: () => boolean
}

export const useCalendarStore = create<CalendarSaveState>((set, get) => ({
  lastSaveTimestamp: null,
  lastSaveData: null,
  isCalendarLoading: false,
  isSaving: false,
  optimisticMeals: [],
  
  setCalendarLoading: (loading) => {
    console.log(`üîÑ Ï†ÑÏó≠ Ï∫òÎ¶∞Îçî Î°úÎî© ÏÉÅÌÉú Î≥ÄÍ≤Ω: ${loading}`)
    set({ isCalendarLoading: loading })
  },
  
  setSaveCompleted: (data) => {
    set({
      lastSaveTimestamp: Date.now(),
      lastSaveData: data,
      isSaving: false,
      isCalendarLoading: false
    })
  },
  
  addOptimisticMeals: (meals) => {
    console.log(`üîç addOptimisticMeals Ìò∏Ï∂ú: ${meals.length}Í∞ú ÏãùÎã®`)
    const optimisticMeals = meals.map(meal => ({
      ...meal,
      id: `optimistic-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      timestamp: Date.now()
    }))
    
    console.log(`üîç ÏÉùÏÑ±Îêú Optimistic Îç∞Ïù¥ÌÑ∞:`, optimisticMeals)
    
    set(state => {
      const newState = {
        isSaving: true,
        optimisticMeals: [...state.optimisticMeals, ...optimisticMeals]
      }
      console.log(`üîç CalendarStore ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:`, newState)
      return newState
    })
  },
  
  removeOptimisticMeals: (mealIds) => {
    set(state => ({
      optimisticMeals: state.optimisticMeals.filter(meal => !mealIds.includes(meal.id))
    }))
  },
  
  clearSaveState: () => {
    set({
      lastSaveTimestamp: null,
      lastSaveData: null,
      isSaving: false,
      isCalendarLoading: false,
      optimisticMeals: []
    })
  },
  
  isRecentSave: () => {
    const { lastSaveTimestamp } = get()
    if (!lastSaveTimestamp) return false
    
    const timeDiff = Date.now() - lastSaveTimestamp
    return timeDiff < 5 * 60 * 1000 // 5Î∂Ñ Ïù¥ÎÇ¥
  }
}))
