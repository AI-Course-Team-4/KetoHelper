openapi: 3.1.0
info: { title: Diet Planner API, version: "1.0.0" }
servers: [ { url: https://api.yourapp.com/v1 } ]
components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer }
  schemas:
    Error:
      type: object
      properties: { code: {type: string}, message: {type: string}, details: {type: object} }
paths:
  /plans/generate:
    post:
      summary: Generate meal plan (date range + strictness)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [start_date, end_date, strictness]
              properties:
                start_date: { type: string, format: date }
                end_date:   { type: string, format: date }
                strictness: { type: string, enum: [easy, standard, strict, ultra] }
                meals_per_day: { type: integer, default: 3 }
                prefs:
                  type: object
                  properties:
                    hard_ban: { type: array, items: { type: string } }
                    allergies: { type: array, items: { type: string } }
                    dislike: { type: array, items: { type: string } }
      responses:
        "200": { description: OK }
        "400": { description: INVALID_DATE_RANGE, content: { application/json: { schema: { $ref: "#/components/schemas/Error" }}}}
        "422": { description: CONSTRAINT_CONFLICT, content: { application/json: { schema: { $ref: "#/components/schemas/Error" }}}}
  /locations/nearby:
    get:
      summary: Keto-friendly menus near a location
      parameters:
        - in: query; name: lat; required: true; schema: { type: number }
        - in: query; name: lng; required: true; schema: { type: number }
        - in: query; name: radius; schema: { type: integer, default: 100 }
        - in: query; name: limit;  schema: { type: integer, default: 10 }
        - in: query; name: min_score; schema: { type: integer, default: 70 }
      responses:
        "200": { description: OK }
        "400": { description: INVALID_COORDS, content: { application/json: { schema: { $ref: "#/components/schemas/Error" }}}}
  /preferences:
    post:
      summary: Upsert user preferences
      responses: { "200": { description: OK }, "400": { description: INVALID_INPUT } }
  /healthz:
    get: { summary: Health check, responses: { "200": { description: OK } } }
security: [ { bearerAuth: [] } ]
